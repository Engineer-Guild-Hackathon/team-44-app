name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: functions
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true
      
      - name: Upload coverage to Codecov
        if: github.event_name == 'push'
        uses: codecov/codecov-action@v3
        with:
          directory: functions/coverage
          flags: backend

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true
      
      - name: Upload coverage to Codecov
        if: github.event_name == 'push'
        uses: codecov/codecov-action@v3
        with:
          directory: web/coverage
          flags: frontend

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install root dependencies
        run: npm ci
      
      - name: Install frontend dependencies
        run: cd web && npm ci
      
      - name: Install backend dependencies
        run: cd functions && npm ci
      
      - name: Build frontend
        run: cd web && npm run build
      
      - name: Build backend
        run: cd functions && npm run build

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest
      
      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci
          cd ../web && npm ci
      
      - name: Start Firebase Emulators
        run: |
          firebase emulators:start --only firestore,auth --detached
        timeout-minutes: 2
      
      - name: Wait for emulators
        run: sleep 10
      
      - name: Run integration tests
        run: |
          # For now, just verify emulators are running
          curl -f http://localhost:8080 || echo "Firestore emulator check"
          curl -f http://localhost:9099 || echo "Auth emulator check"
        timeout-minutes: 1
      
      - name: Stop Firebase Emulators
        if: always()
        run: firebase emulators:stop

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, build-test, integration-test]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Backend Tests: ${{ needs.test-backend.result }}"
          echo "Frontend Tests: ${{ needs.test-frontend.result }}"
          echo "Build Test: ${{ needs.build-test.result }}"
          echo "Integration Tests: ${{ needs.integration-test.result }}"
          
          # Fail if any critical tests failed
          if [ "${{ needs.test-backend.result }}" != "success" ] || [ "${{ needs.test-frontend.result }}" != "success" ]; then
            echo "Critical tests failed"
            exit 1
          fi